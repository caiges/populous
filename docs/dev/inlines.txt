.. _dev-inlines:

===========
Inlines API
===========

.. module:: inlines

The inlines system in Populous has two main concepts; using the inline system in your own application and creating your own inline to be used by other applications.  In Populous, both the ``news`` app and the ``blogs`` app use ``InlineField``, while apps like ``polls`` and ``locations`` define their own inlines by subclassing ``BaseInline``.

Giving your application the ability to use preexisting inlines is very simple.  All you need to do is define a field that is an instance of  ``inlines.InlineField``.  Under the surface ``InlineField`` is a subclass of ``django.models.XMLField`` with added functionality that integrates with the rest of the inlines system.

Creating an inline that other applications can use is also very straight forward.  In the most basic case, all you need to do is define a subclass of ``inlines.Inline``.  In fact, the processes of creating an inline is pretty similar to defining a sublass of ``ModelAdmin`` for use in Django's admin interface.

The default system is designed to work with the ``django.contrib.admin`` app.

Quick Example
=============

Let's pretend you have an application called ``polls`` and you would like to allow your users to be able to add a ``Poll`` object into the body of a news ``Story``.  This example inline defines a ``PollInline``::

    from populous.inlines import ModelInline, InlineForm

    class PollInline(ModelInline):
        name = 'Poll Inline'
        model = Poll

You would place this code into a file called ``inlines.py`` inside of your ``polls`` directory.  Here is an example of what your application layout might look like::

    polls/
        __init__.py
        admin.py
        inlines.py
        models.py
        views.py
        urls.py

When you run ``syncdb`` your newly created ``PollInline`` will be automatically registered with the system (alternativley you can run a management command; more on that later).  If you log into the admin site and head over to inlines, you'll see that it has been automatically detected and is now ready for use by any ``InlineField`` instance.  You should see a screen similar to this:

.. image:: _images/inlines01.png
    :alt: Django admin showing newly created PollInline

Creating Inlines
================

.. currentmodule:: inlines.base

All inlines are subclasses of ``inlines.base.Inline``

.. class:: Inline(registry)

The base ``Inline`` class should be sub-classed to create you own inline.  Every ``Inline`` has a number of useful attributes and methods, explained below.

.. attribute:: Inline.admin_form

A ``django.forms.Form`` subclass that is used to generate a form for the creation of a new inline.  You can use any form you like but it must define a render method that outputs the proper HTML to edit the inline in the admin interface.  Populous includes a convenient form class, InlineForm, for you to subclass which provides a render method.  This can also be defined as an inner ``class AdminForm``; see :class:`~Inline.AdminForm`.  Whichever you define is fine, but you **must** define one or the other.

.. attribute:: Inline.app_label

This attribute is automatically calculated using the same method that a Django model does.  However, if you wish, you can manually define it.

.. attribute:: Inline.default_template

It is generally good practice to give your inline the ability to load a custom, user-defined template.  However, you should define a default template.

.. attribute:: Inline.display_group
.. attribute:: Inline.name

This is the internal name for the inlines.  This needs to be unique when taken with :attr:`app_label<Inline.app_label>`.  
The default value is derived from the class name, so if your inline class is called ``TextInline``, its ``name`` 
attribute will be ``textinline``.

.. attribute:: Inline.verbose_name

The name of the inline as will appear in the admin.  If not defined, Populous will use a munged version of the class name: ``TextInline`` becomes ``text inline``.

.. attribute:: Inline.verbose_name_plural

.. class:: Inline.AdminForm(InlineForm)

Instead of 


Registering Inlines
===================

Once you have created a new inline and have placed it in a file named ``inlines.py`` within your application's folder you can run ``syncdb`` and your new inline will automatically be registered.  Additionally, there are a few management commands that come with the inlines application, which include:

sync
----

.. django-admin:: inlines sync <appname appname ...>

Automatically detects and registers all inlines for the given application(s).  If no application name is provided, all installed inlines will be synced.

reset
-----

.. django-admin:: inlines reset <appname appname ...>

Removes and syncs all inlines for the given application(s).  If no application name is provided, all installed inlines will be reset and synced.
 